import xml.etree.ElementTree as ET
from translate import Translator
import re
from datetime import datetime

#required funstions
def convert_russian_date(input_date):
            # Define the mapping of Russian month names to their numeric values
            months = {
                'января': 1,
                'февраля': 2,
                'марта': 3,
                'апреля': 4,
                'мая': 5,
                'июня': 6,
                'июля': 7,
                'августа': 8,
                'сентября': 9,
                'октября': 10,
                'ноября': 11,
                'декабря': 12
            }

            # Split the Russian date string and extract day, month, and year
            date_parts = input_date.split()
            day = int(date_parts[0])
            month = months[date_parts[1]]
            year = int(date_parts[2])

            # Create a datetime object
            dt = datetime(year, month, day)

            # Format the datetime object in the desired output format
            formatted_date = dt.strftime('%Y—%m—%d')

            return formatted_date

# Function to check if a string contains at least one uppercase word
def contains_uppercase_word(text):
    words = text.split()
    for word in words:
        if any(char.isupper() for char in word):
            return True
    return False

def find_largest_line_number(xml_file, **attributes):
    # Initialize the largest line number
    largest_line_number = -1

    # Load the XML file
    tree = ET.parse(xml_file)
    root = tree.getroot()

    # Find all <text> elements with the specified attributes (if provided)
    for text_element in root.findall('.//text'):
        if all(text_element.get(attr) == value for attr, value in attributes.items()):
            if 'line_number' in text_element.attrib:
                line_number = int(text_element.get('line_number'))
                largest_line_number = max(largest_line_number, line_number)

    return largest_line_number

# Load the original XML file
xml_file = 'output12.xml'
tree = ET.parse(xml_file)
root = tree.getroot()

# Create a translator instance
translator = Translator(from_lang='ru', to_lang='en')

# Create a new XML structure
standard_root = ET.Element('standard', attrib={
    'xmlns:tbx': 'urn:iso:std:iso:30042:ed-1',
    'xmlns:svg': 'http://www.w3.org/2000/svg'
})

front = ET.SubElement(standard_root, 'front')
iso_meta = ET.SubElement(front, 'iso-meta')
title_wrap_ru = ET.SubElement(iso_meta, 'title-wrap', {'xml:lang': 'ru'})
intro_ru = ET.SubElement(title_wrap_ru, 'intro')
main_ru = ET.SubElement(title_wrap_ru, 'main')
compl_ru = ET.SubElement(title_wrap_ru, 'compl')
full_ru = ET.SubElement(title_wrap_ru, 'full')

title_wrap_eng = ET.SubElement(iso_meta, 'title-wrap', {'xml:lang': 'eng'})
intro_eng = ET.SubElement(title_wrap_eng, 'intro')
main_eng = ET.SubElement(title_wrap_eng, 'main')
compl_eng = ET.SubElement(title_wrap_eng, 'compl')
full_eng = ET.SubElement(title_wrap_eng, 'full')

# Add the <doc-ident> structure within <iso-meta>
doc_ident = ET.SubElement(iso_meta, 'doc-ident')
sdo = ET.SubElement(doc_ident, 'sdo')
language = ET.SubElement(doc_ident, 'language')
language.text = 'ru'  # Set the language to 'ru'

# Add the <std-ident> structure within <iso-meta>
std_ident = ET.SubElement(iso_meta, 'std-ident')
originator = ET.SubElement(std_ident, 'originator')
doc_type = ET.SubElement(std_ident, 'doc-type')
doc_number = ET.SubElement(std_ident, 'doc-number')
edition = ET.SubElement(std_ident, 'edition')
version = ET.SubElement(std_ident, 'version')

# Add the <std-ref type="dated"> structure within <iso-meta>
std_ref_dated = ET.SubElement(iso_meta, 'std-ref', {'type': 'dated'})

# Add the <secretariat> tag within <iso-meta>
secretariat = ET.SubElement(iso_meta, 'secretariat')

# Add the <ics> structure within <iso-meta>
ics = ET.SubElement(iso_meta, 'ics')

# Add the <permissions> structure with <copyright-statement>
permissions = ET.SubElement(iso_meta, 'permissions')
copyright_statement = ET.SubElement(permissions, 'copyright-statement')
copyright_holder = ET.SubElement(permissions, 'copyright_holder')
copyright_year = ET.SubElement(permissions, 'copyright-year')

# Define a regex pattern to match the year and sentence
pattern = r'\b\d{4}\b'

# Add the <custom-meta-group> structure with <custom-meta>
custom_meta_group = ET.SubElement(iso_meta, 'custom-meta-group')

custom_meta_udk = ET.SubElement(custom_meta_group, 'custom-meta')
meta_name_udk = ET.SubElement(custom_meta_udk, 'meta-name')
meta_value_udk = ET.SubElement(custom_meta_udk, 'meta-value')

custom_meta_keywords = ET.SubElement(custom_meta_group, 'custom-meta')
meta_name_keywords = ET.SubElement(custom_meta_keywords, 'meta-name')
meta_value_keywords = ET.SubElement(custom_meta_keywords, 'meta-value')

custom_meta_type = ET.SubElement(custom_meta_group, 'custom-meta')
meta_name_type = ET.SubElement(custom_meta_type, 'meta-name')
meta_value_type = ET.SubElement(custom_meta_type, 'meta-value')

meta_name_type.text = 'Type'
type_meta_value = 'НАЦИОНАЛЬНЫЙ СТАНДАРТ РОССИЙСКОЙ ФЕДЕРАЦИИ'
meta_value_type.text = type_meta_value 

nat_meta = ET.SubElement(front, 'nat-meta')

# Add the <std-ident> structure within <nat-meta>
std_ident_nat_meta = ET.SubElement(nat_meta, 'std-ident')
originator_nat_meta = ET.SubElement(std_ident_nat_meta, 'originator')
doc_type_nat_meta = ET.SubElement(std_ident_nat_meta, 'doc-type')
doc_number_nat_meta = ET.SubElement(std_ident_nat_meta, 'doc-number')
edition_nat_meta = ET.SubElement(std_ident_nat_meta, 'edition')
versionnat_meta_nat_meta = ET.SubElement(std_ident_nat_meta, 'version')
meta_date_nat_meta_ratification = ET.SubElement(std_ident_nat_meta, 'meta-date', {'type': 'ratification'})
meta_date_nat_meta_implementation = ET.SubElement(std_ident_nat_meta, 'meta-date', {'type': 'implementation'})
meta_date_nat_meta_termination = ET.SubElement(std_ident_nat_meta, 'meta-date', {'type': 'termination'})
comm_ref_nat_meta = ET.SubElement(std_ident_nat_meta, 'comm-ref')
secretariat_nat_meta = ET.SubElement(std_ident_nat_meta, 'secretariat')

# Create the <permissions> structure
permissions_nat_meta = ET.SubElement(nat_meta,'permissions')
copyright_statement_nat_meta = ET.SubElement(permissions_nat_meta, 'copyright-statement')
copyright_statement_nat_meta.text = 'Все права сохраняются'
copyright_year_nat_meta = ET.SubElement(permissions_nat_meta, 'copyright-year')
copyright_holder_nat_meta = ET.SubElement(permissions_nat_meta, 'copyright-holder')

notes_front = ET.SubElement(front, 'notes')
p_notes_front = ET.SubElement(notes_front, 'p')

sec_foreword = ET.SubElement(front, 'sec', {'id': 'sec_foreword_1', 'sec-type': 'foreword'})
title_foreword = ET.SubElement(sec_foreword, 'title')
title_foreword.text = 'Предисловие'
p1_sec_foreword = ET.SubElement(sec_foreword, 'p')
p2_sec_foreword = ET.SubElement(sec_foreword, 'p')
p3_sec_foreword = ET.SubElement(sec_foreword, 'p')
p4_sec_foreword = ET.SubElement(sec_foreword, 'p')

sec_intro = ET.SubElement(front, 'sec', {'id': 'sec_intro', 'sec-type': 'intro'})
title = ET.SubElement(sec_intro, 'title')
sec_intro_p = ET.SubElement(sec_intro, 'p')

# <body> element
body = ET.SubElement(standard_root, 'body')

# Create a <back> tag and add it to the root
back = ET.SubElement(standard_root, 'back')

# Iterate through the <text> tags in the original XML
for text_element in root.findall('.//text'):
    # Check if the attributes match the specified criteria for <intro>
    if (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '18.0' and
        text_element.get('bold') == 'true' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        text_element.get('leading') == '12.25' and
        text_element.get('indent') == '67.8'
    ):
        # Extract the text content from the <text> tag and add it to <intro> (ru)
        text_content = text_element.text
        intro_ru.text = text_content
        
        # Translate the content from Russian to English and add it to <intro> (eng)
        translated_text = translator.translate(text_content)
        intro_eng.text = translated_text
        
    # Check if the attributes match the specified criteria for <main>
    elif (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '20.0' and
        text_element.get('bold') == 'true' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'center' and
        text_element.get('leading') == '11.65' and
        text_element.get('indent') == '0.0'
    ):
        # Extract the text content from the <text> tag and add it to <main> (ru)
        text_content = text_element.text
        main_ru.text = text_content
        
        # Translate the content from Russian to English and add it to <main> (eng)
        translated_text = translator.translate(text_content)
        main_eng.text = translated_text
        
    # Check if the attributes match the specified criteria for <full>
    elif (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '12' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        text_element.get('leading') == '12.25' and
        text_element.get('indent') == '145.5'
    ):
        # Extract the text content from the <text> tag and add it to <full> (ru)
        text_content = text_element.text
        full_ru.text = text_content
        
        # Translate the content from Russian to English and add it to <full> (eng)
        translated_text = translator.translate(text_content)
        full_eng.text = translated_text
    elif (
        text_element.get('font') == 'ArialMT' and
        text_element.get('font_size') == '10.0' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        text_element.get('leading') == '12.349999999999998' and
        text_element.get('indent') == '0.0'
    ):
        p_text_content = text_element.text
        p1_sec_foreword.text = p_text_content
        # Extract the text content from the <text> tag and remove the prefix
        text_content = text_element.text.strip('1 РАЗРАБОТАН')

        # Add the extracted text content to <sdo>
        sdo.text = text_content
    elif (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '10.0' and
        text_element.get('bold') == 'true' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        text_element.get('leading') == '11.65' and
        text_element.get('indent') == '0.0'
    ):
        # Extract the text content from the <text> tag
        text_content = text_element.text
               
        # Use regular expressions to find the pattern with digits and dots
        matches = re.findall(r'(\d+(\.\d+)?)', text_content)
        
        if matches:
            # Join the matched digits with dots (if there are multiple matches)
            digits_with_dots = '.'.join(match[0] for match in matches)
            
            # Add the extracted digits with dots to <doc-number>
            doc_number.text = digits_with_dots
            doc_number_nat_meta.text = digits_with_dots
            
        std_ref_text = ET.SubElement(std_ref_dated, 'std-ref')
        std_ref_text.text = text_content
        
    elif (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '12' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        text_element.get('leading') == '12.25' and
        text_element.get('indent') == '0.0' and
        'ВНЕСЕН' in text_element.text  # Check if 'ВНЕСЕН' is in the text
    ):
        p_text_content = text_element.text
        p2_sec_foreword.text = p_text_content
        
        # Extract the text content from the <text> tag
        text_content = text_element.text
        
        # Extract the text content from the <text> tag and remove the prefix
        text_content = text_content.replace('2 ВНЕСЕН', '').strip()
        
        # Add the extracted text content to <secretariat>
        secretariat.text = text_content
        
    elif (
        text_element.get('font') == 'ArialMT' and
        text_element.get('font_size') == '10.0' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'right' and
        text_element.get('leading') == '11.65'
    ):
        # Extract the text content from the <text> tag
        text_content = text_element.text
        
        # Add the extracted text content to <ics>
        ics.text = text_content
    elif (
        text_element.get('font') == 'ArialMT' and
        text_element.get('font_size') == '10.0' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'justify' and
        text_element.get('leading') == '12.25' and
        text_element.get('indent') == '0.0'
    ):
        # Extract the text content from the <text> tag
        text_content = text_element.text
        
        # Add the extracted text content to <copyright-statement>
        copyright_statement.text = text_content
    elif (
        text_element.get('font') == 'ArialMT' and
        text_element.get('font_size') == '10.0' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'right' and
        text_element.get('leading') == '11.65' and
        text_element.get('indent') == '0.0'
    ):
        # Extract the text content from the <text> tag
        text_content = text_element.text
                
        # Add the extracted text content to <copyright-holder>
        copyright_holder.text = text_content
    elif (
        text_element.get('font') == 'ArialMT' and
        text_element.get('font_size') == '10.0' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        text_element.get('leading') == '11.65' and
        'УДК' in text_element.text  # Check if 'УДК' is in the text
    ):
        # Extract the text content from the <text> tag
        text_content = text_element.text
        
        # Check if the text starts with 'УДК '
        if text_content.startswith('УДК '):
            # Remove the 'УДК ' prefix
            udk_value = text_content[len('УДК '):].strip()
            
            # Set the custom metadata values
            meta_name_udk.text = 'UDK'
            meta_value_udk.text = udk_value
    elif (
        text_element.get('font') == 'ArialMT' and
        text_element.get('font_size') == '10.0' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        text_element.get('leading') == '12.25' and
        text_element.get('indent') == '0.3' and
        text_element.text.startswith('Ключевые слова:')
    ):
        # Extract the text content from the <text> tag
        text_content = text_element.text
        
        # Remove the 'Ключевые слова:' prefix
        keywords = text_content.replace('Ключевые слова:', '').strip()
        
        # Set the custom metadata values
        meta_name_keywords.text = 'Keywords'
        meta_value_keywords.text = keywords
    elif (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '12' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        text_element.get('leading') == '12.25' and
        text_element.get('indent') == '0.0' and
        'УТВЕРЖДЕН И ВВЕДЕН В ДЕЙСТВИЕ' in text_element.text
    ):
        p_text_content = text_element.text
        p3_sec_foreword.text = p_text_content
        
        # Extract the date from the text using datetime.strptime
        date_text = text_element.text.split('от ')[-1].split(' №')[0]
        
        formatted_date  = convert_russian_date(date_text)#datetime.strptime(date_text, '%d %B %Y г.')
        
        meta_date_nat_meta_ratification.text = formatted_date
    elif (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '9.0' and
        text_element.get('bold') == 'true' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'right' and
        text_element.get('leading') == '11.65' and
        text_element.get('indent') == '0.0'
    ):
        # Extract the text content
        text_content = text_element.text
        
        # Remove the prefix 'Дата введения — ' from the text
        date_text = text_content.replace('Дата введения — ', '').strip()

        # Create the <meta-date> element
        meta_date_nat_meta_implementation.text = date_text
    elif (
        text_element.get('font') == 'ArialMT' and
        text_element.get('font_size') == '10.0' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        text_element.get('leading') == '11.65' and
        text_element.get('indent') == '25.5' and
        contains_uppercase_word(text_element.text)  # Check for uppercase word
    ):
        # Extract the text content
        text_content = text_element.text
        
        
        # Check if the text contains 'ВЗАМЕН' or 'ВПЕРВЫЕ'
        if 'ВЗАМЕН' in text_content or 'ВПЕРВЫЕ' in text_content:
            p4_sec_foreword.text = text_content
    elif (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '12.0' and
        text_element.get('bold') == 'true' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'center' and
        text_element.get('leading') == '11.65' and
        text_element.get('indent') == '0.0' and
        'Введение' in text_element.text
    ):
        title.text = text_element.text
    elif (
        text_element.get('font') == 'ArialMT' and
        text_element.get('font_size') == '10.0' and
        text_element.get('bold') == 'false' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        text_element.get('leading') == '12.25' and
        text_element.get('indent') == '0.0' and
        'Настоящий стандарт в системе' in text_element.text
    ):
        desired_text = text_element.text
        sec_intro_p.text = desired_text
    elif (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '9.0' and
        text_element.get('bold') == 'true' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'center' and
        text_element.get('leading') == '12.25' and
        text_element.get('indent') == '201.6' 
        ):
        app_line = text_element.get('line_number')

        # Extract the content before and after parentheses
        text_content = text_element.text
        label, annex_type = text_content.split('(')
        label = label.strip()  # Remove leading/trailing spaces

        # Create the <app-group> structure
        app_group = ET.SubElement(back, 'app-group')

        # Create the <app> element
        app = ET.SubElement(app_group, 'app', {'id': 'app_a', 'content-type': 'inform-annex'})

        # Create the <label> element and set its text
        label_element = ET.SubElement(app, 'label')
        label_element.text = label.strip()

        # Create the <annex-type> element and set its text
        annex_type_element = ET.SubElement(app, 'annex-type')
        annex_type_element.text = f'({annex_type.strip()})'
    elif (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '10.0' and
        text_element.get('bold') == 'true' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'center' and
        text_element.get('leading') == '11.65' and
        text_element.get('indent') == '0.0' and
        'Библиография' in text_element.text
        ):
        bib_line = text_element.get('line_number')

        # Create the <ref-list> structure
        ref_list = ET.SubElement(back, 'ref-list', {'content-type': 'bibl', 'id': 'sec_bibl'})

        # Create the <title> element
        title = ET.SubElement(ref_list, 'title')
        title.text = text_element.text
        
        
for link_element in root.findall('.//link'):
    if (
        link_element.get('font') == 'Arial' and
        link_element.get('font_size') == '10.0' and
        link_element.get('bold') == 'false' and
        link_element.get('italic') == 'true' and
        link_element.get('underline') == 'false' and
        link_element.get('alignment') == 'left' and
        link_element.get('leading') == '12.5' and
        link_element.get('indent') == '0.0'
    ):
        # Extract the text content from the <link> element
        link_text = link_element.text

        p_notes_front.text = link_text
        
        # Extract the URI (www.gost.ru) from the link_text
        uri_start = link_text.find('www.')
        if uri_start != -1:
            uri = link_text[uri_start:]
        else:
            uri = ""
        
        # Add the URI as <uri>
        uri_element = ET.SubElement(p_notes_front, 'uri')
        uri_element.text = uri

line_number_list = [] 

# Find all <text> elements with the specified attributes
section_texts = []
for text_element in root.findall('.//text'):
    if (
        text_element.get('font') == 'Arial' and
        text_element.get('font_size') == '12.0' and
        text_element.get('bold') == 'true' and
        text_element.get('italic') == 'false' and
        text_element.get('underline') == 'false' and
        text_element.get('alignment') == 'left' and
        (
            text_element.get('leading') == '11.65' or
            text_element.get('leading') == '11.75'
        ) and
        text_element.get('indent') is not None #== '25.5'
    ):
        section_texts.append(text_element.text)
        # Get the line number attribute
        line_number = text_element.get('line_number')
        line_number_list.append(line_number)

largest_line = find_largest_line_number(xml_file)   

if (app_line or bib_line) is not None:
    line_number_list.append(app_line)
    line_number_list.append(bib_line)

    line_number_list.append(largest_line)
numbers = [int(value) for value in line_number_list]
#print(numbers)


# Create <sec> elements based on the section_texts
for i, section_text in enumerate(section_texts, start=1):
    sec = ET.SubElement(body, 'sec', {'id': f'sec_{i}'})
    
    # Create <label> element with the section number
    label = ET.SubElement(sec, 'label')
    label.text = str(i)
    
    # Create <title> element with the section name
    title = ET.SubElement(sec, 'title')
    
    # Use regular expressions to remove leading digits
    section_text = re.sub(r'^\d+\s*', '', section_text)  
    title.text = section_text
    
# Define regular expression patterns for matching id attributes
sec_id_pattern = re.compile(r'sec_\d+')
app_id_pattern = re.compile(r'app_[a-zA-Z]+')

# Define a function to recursively search for matching tags
def find_tags_by_id_pattern(element, pattern):
    matching_tags = []

    if 'id' in element.attrib and pattern.match(element.attrib['id']):
        matching_tags.append(element)

    for child in element:
        matching_tags.extend(find_tags_by_id_pattern(child, pattern))

    return matching_tags

# Search for matching <sec> tags
matching_sec_tags = find_tags_by_id_pattern(standard_root, sec_id_pattern)

# Search for matching <app> tags
matching_app_tags = find_tags_by_id_pattern(standard_root, app_id_pattern)

# Search for matching <ref-list> tags with content-type="bibl" and id="sec_bibl"
matching_ref_list_tags = standard_root.findall(".//ref-list[@content-type='bibl'][@id='sec_bibl']")

matching_ref_list_ids = [ref_list_tag.attrib['id'] for ref_list_tag in matching_ref_list_tags]

# Collect all the collected ids into one list
all_ids = [tag.attrib['id'] for tag in matching_sec_tags + matching_app_tags] + matching_ref_list_ids

# Initialize an empty dictionary to store the line numbers for each id
line_numbers_dist = {}

# Pair adjacent numbers and create the mapping
for i in range(len(all_ids)):
    if i < len(all_ids) - 1:
        start_line = numbers[i] + 1
        end_line = numbers[i + 1] - 1
    else:
        # For the last id, use the last number in the list as the end line
        start_line = numbers[i] + 1
        end_line = numbers[-1]

    # Create a list of line numbers between start_line and end_line (inclusive)
    line_numbers = list(range(start_line, end_line + 1))
    
    # Add the id and its associated line numbers to the dictionary
    line_numbers_dist[all_ids[i]] = line_numbers

# Print the resulting mapping
for key, value in line_numbers_dist.items():
    print(f"{key}: {value}")

def parse_xml_by_line_number(xml_file, target_line_number):
    try:
        tree = ET.parse(xml_file)
        root = tree.getroot()
    except ET.ParseError:
        print("Error parsing XML file.")
        return []

    parsed_texts = []

    
    for element in root.iter():
        if element.tag in ('text', 'list_item'):
            line_number = int(element.get("line_number", 0))
            
            if line_number == target_line_number:
                text = ''
                if element.text is not None:
                    text += element.text
                if element.tail is not None:
                    text += element.tail

                parsed_text = text.strip()
                if parsed_text:
                    parsed_texts.append(parsed_text)

    return parsed_texts

def replace_brackets_with_tags(text):
    def replace(match):
        index = match.group(1)
        return f'<xref ref-type="bibr" rid="biblref_{index}">[{index}]</xref>'

    pattern = r'\[(\d+)\]'
    replaced_text = re.sub(pattern, replace, text)
    return replaced_text

pattern_id = r'^(\d+(\.\d+)*)'
for sec in range(len(list(line_numbers_dist.values()))):
    tag_id = standard_root.findall(f".//*[@id='{list(line_numbers_dist.keys())[sec]}']")
    for line_number in list(line_numbers_dist.values())[sec]: 
        parsed_text = parse_xml_by_line_number(xml_file, line_number)
        if parsed_text is not None and len(parsed_text) == 1:
            match = re.match(pattern_id, parsed_text[0])
            if 'П р и м е ч а н и е' in parsed_text[0]:
                non_note = ET.SubElement(tag_id[0], 'non-normative-note')
                label_note = ET.SubElement(non_note, 'label')
                label_note.text = 'Примечание — '
                text_note = ET.SubElement(non_note, 'p')
                text_note.text = parsed_text[0].replace('П р и м е ч а н и е', '').strip()            
            elif list(line_numbers_dist.keys())[sec].startswith('app_'):
                # Check if the line starts with a format like 'А.1', 'А.2', etc.
                app_pattern = r'^(?:[А-Я]\.\d+)'  # Modify this pattern as needed
                match_app = re.match(app_pattern, parsed_text[0])
                if match_app:
                    app_id = match_app.group(0).replace('.', '').lower()  # Convert to lowercase and remove '.'
                    p_tag = ET.SubElement(tag_id[0], 'p')
                    p_tag.set('id', f'p_{app_id}')
                    p_tag.text = parsed_text[0]            
            elif list(line_numbers_dist.keys())[sec] == 'sec_bibl':
                # Check if the line contains any digit between [ and ]
                cit_pattern = r'\[(\d+)\]'
                match_cit = re.search(cit_pattern, parsed_text[0])
                if match_cit:
                    cit_id = match_cit.group(0) 
                    cit_tag = ET.SubElement(tag_id[0], 'ref')
                    digit_id = re.sub(cit_pattern, r'\1', cit_id)
                    cit_tag.set('id', f"biblref_{digit_id}") #cit_id}')
                    label_cit = ET.SubElement(cit_tag, 'label')
                    label_cit.text = match_cit.group(0)
                    cit_el = ET.SubElement(cit_tag, 'element-citation')
                    source = ET.SubElement(cit_el, 'source')
                    source.text = re.sub(cit_pattern, '', parsed_text[0])
            elif match:
                p_id = match.group(1)
                p_id_tag = ET.SubElement(tag_id[0], 'p')
                p_id_tag.set('id', f'p_{p_id}')
                p_id_tag.text = replace_brackets_with_tags(parsed_text[0])
            else:
                p_tag = ET.SubElement(tag_id[0], 'p')
                p_tag.text = replace_brackets_with_tags(parsed_text[0])
                
# Create a new XML tree with the modified structure
new_tree = ET.ElementTree(standard_root)

# Save the new XML to a file
new_tree.write('new_structure23.xml', encoding='utf-8', xml_declaration=True)
